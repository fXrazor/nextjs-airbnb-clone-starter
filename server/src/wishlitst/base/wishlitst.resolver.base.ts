/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Wishlitst } from "./Wishlitst";
import { WishlitstCountArgs } from "./WishlitstCountArgs";
import { WishlitstFindManyArgs } from "./WishlitstFindManyArgs";
import { WishlitstFindUniqueArgs } from "./WishlitstFindUniqueArgs";
import { CreateWishlitstArgs } from "./CreateWishlitstArgs";
import { UpdateWishlitstArgs } from "./UpdateWishlitstArgs";
import { DeleteWishlitstArgs } from "./DeleteWishlitstArgs";
import { Listing } from "../../listing/base/Listing";
import { User } from "../../user/base/User";
import { WishlitstService } from "../wishlitst.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Wishlitst)
export class WishlitstResolverBase {
  constructor(
    protected readonly service: WishlitstService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Wishlitst",
    action: "read",
    possession: "any",
  })
  async _wishlitstsMeta(
    @graphql.Args() args: WishlitstCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Wishlitst])
  @nestAccessControl.UseRoles({
    resource: "Wishlitst",
    action: "read",
    possession: "any",
  })
  async wishlitsts(
    @graphql.Args() args: WishlitstFindManyArgs
  ): Promise<Wishlitst[]> {
    return this.service.wishlitsts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Wishlitst, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Wishlitst",
    action: "read",
    possession: "own",
  })
  async wishlitst(
    @graphql.Args() args: WishlitstFindUniqueArgs
  ): Promise<Wishlitst | null> {
    const result = await this.service.wishlitst(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wishlitst)
  @nestAccessControl.UseRoles({
    resource: "Wishlitst",
    action: "create",
    possession: "any",
  })
  async createWishlitst(
    @graphql.Args() args: CreateWishlitstArgs
  ): Promise<Wishlitst> {
    return await this.service.createWishlitst({
      ...args,
      data: {
        ...args.data,

        listing: {
          connect: args.data.listing,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wishlitst)
  @nestAccessControl.UseRoles({
    resource: "Wishlitst",
    action: "update",
    possession: "any",
  })
  async updateWishlitst(
    @graphql.Args() args: UpdateWishlitstArgs
  ): Promise<Wishlitst | null> {
    try {
      return await this.service.updateWishlitst({
        ...args,
        data: {
          ...args.data,

          listing: {
            connect: args.data.listing,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Wishlitst)
  @nestAccessControl.UseRoles({
    resource: "Wishlitst",
    action: "delete",
    possession: "any",
  })
  async deleteWishlitst(
    @graphql.Args() args: DeleteWishlitstArgs
  ): Promise<Wishlitst | null> {
    try {
      return await this.service.deleteWishlitst(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listing",
  })
  @nestAccessControl.UseRoles({
    resource: "Listing",
    action: "read",
    possession: "any",
  })
  async getListing(
    @graphql.Parent() parent: Wishlitst
  ): Promise<Listing | null> {
    const result = await this.service.getListing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Wishlitst): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
