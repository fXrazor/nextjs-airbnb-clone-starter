/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Wishlitst as PrismaWishlitst,
  Listing as PrismaListing,
  User as PrismaUser,
} from "@prisma/client";

export class WishlitstServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WishlitstCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wishlitst.count(args);
  }

  async wishlitsts<T extends Prisma.WishlitstFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlitstFindManyArgs>
  ): Promise<PrismaWishlitst[]> {
    return this.prisma.wishlitst.findMany<Prisma.WishlitstFindManyArgs>(args);
  }
  async wishlitst<T extends Prisma.WishlitstFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlitstFindUniqueArgs>
  ): Promise<PrismaWishlitst | null> {
    return this.prisma.wishlitst.findUnique(args);
  }
  async createWishlitst<T extends Prisma.WishlitstCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlitstCreateArgs>
  ): Promise<PrismaWishlitst> {
    return this.prisma.wishlitst.create<T>(args);
  }
  async updateWishlitst<T extends Prisma.WishlitstUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlitstUpdateArgs>
  ): Promise<PrismaWishlitst> {
    return this.prisma.wishlitst.update<T>(args);
  }
  async deleteWishlitst<T extends Prisma.WishlitstDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlitstDeleteArgs>
  ): Promise<PrismaWishlitst> {
    return this.prisma.wishlitst.delete(args);
  }

  async getListing(parentId: string): Promise<PrismaListing | null> {
    return this.prisma.wishlitst
      .findUnique({
        where: { id: parentId },
      })
      .listing();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.wishlitst
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
